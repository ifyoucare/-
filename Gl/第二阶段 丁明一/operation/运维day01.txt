操作系统更新周期：  2年           大约
软件			   ： 6个月

（淘宝天猫热衷于Tengine
   淘宝发起的web服务器项目Tengine）

Apache, Niginx主流, Tengine, Lighttpd 相互竞争
使用php  python  perl  等编写

Tomcat主流,  IBM WebSphere, Jboss  相互竞争
java 编写的网站

一、亚马逊云
二、微软云
三、阿里\谷歌  争夺

nginx  ：  engine x      x 引擎     光盘中没有，需要源码包安装
高性能的http，高并发，稳定
官网：http://nginx.org 

（root 启动程序，程序可以读取写入计算机所有文件
   为防止攻击，新建一个不可登陆的用户，启动程序时会自动
   降为普通用户，即使被攻击也不会被读取信息）

现代化软件都是模块化
100个功能，全部安装，大，性能高，漏洞多
100个功能，自定义安装，默认模块则一般自动安装常用功能

案例1：搭建Nginx服务器
	问题：

在IP地址为192.168.4.5的主机上安装部署Nginx服务，并可以将Nginx服务器，要求编译时启用如下功能：
·  支持SSL加密功能
·  设置Nginx账户及组名称均为nginx
·  Nginx服务器升级到更高版本。
然后客户端访问页面验证Nginx Web服务器：
·  使用火狐浏览器访问
·  使用curl访问

	步骤：
步骤一：构建Nginx服务器

1）使用源码包安装nginx软件包
（红帽光盘内所有以-devel结尾的都是依赖包）
useradd -s /sbin/nologin nginx
./configure   \
> --prefix=/usr/local/nginx   \         指定安装路径
> --user=nginx   \                            指定用户（可任意建）
> --group=nginx  \                          指定组
> --with-http_ssl_module          开启SSL加密功能  https模块
       without-模块      		   可以禁用模块功能

2）nginx命令的用法
# ln -s /usr/local/nginx/sbin/nginx /sbin/ （放入可当命令使用）
# nginx                       启动服务     启动之后再启报错
# nginx  -s  stop         关闭服务     同理
# nginx -s reload        重新加载配置文件（不关服务重新加载）
				    关闭服务使用也报错
# nginx –V                  查看软件信息

netstat命令可以查看系统中启动的端口信息，该命令常用选项如下：
-a显示所有端口的信息
-n以数字格式显示端口号
-t显示TCP连接的端口
-u显示UDP连接的端口
-l显示服务正在监听的端口信息，如httpd启动后，会一直监听80端口
-p显示监听端口的服务名称是什么（也就是程序名称）

nginx服务默认通过TCP 80端口监听客户端请求：
(ps aux | grep nginx)  ps 只能查看程序起没起，不能看端口等
[root@proxy ~]# netstat  -anptu  |  grep nginx
tcp        0        0 0.0.0.0:80        0.0.0.0:*        LISTEN        10441/nginx

3）设置防火墙与SELinux    trusted  permissive

4）测试首页文件
Nginx Web服务默认首页文档存储目录为/usr/local/nginx/html/，在此目录下默认有一个名为index.html的文件，使用客户端访问测试页面：
[root@client ~]# curl http://192.168.4.5
<html>
<head>
<title>Welcome to nginx!</title>
</head>
<body bgcolor="white" text="black">
<center><h1>Welcome to nginx!</h1></center>
</body>
</html>

步骤二：升级Nginx服务器
1）编译新版本nginx软件（有选择性的编译需要的模块）
[root@proxy ~]# tar  -zxvf   nginx-1.12.2.tar.gz
[root@proxy ~]# cd nginx-1.12.2
[root@proxy nginx-1.12.2]# ./configure   \
> --prefix=/usr/local/nginx   \ 
> --user=nginx   \ 
> --group=nginx  \ 
> --with-http_ssl_module
[root@proxy nginx-1.12.2]# make

2) 备份老的nginx主程序，并使用编译好的新版本nginx替换老版本
[root@proxy nginx-1.12.2]# mv /usr/local/nginx/sbin/nginx  \
>/usr/local/nginx/sbin/nginxold
或者
[root@proxy nginx-1.12.2]# mv /usr/local/nginx/sbin/nginx{,.bak}                       直接在要备份的文件名后接.bak结尾

[root@proxy nginx-1.12.2]# cp objs/nginx  /usr/local/nginx/sbin/         //拷贝新版本

[root@proxy nginx-1.12.2]# killall nginx
[root@proxy nginx-1.12.2]# nginx
或者（以下不一定可以成功）
[root@proxy nginx-1.12.2]# make upgrade           //升级
/usr/local/nginx/sbin/nginx -t
nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok
nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful
kill -USR2 `cat /usr/local/nginx/logs/nginx.pid`
sleep 1
test -f /usr/local/nginx/logs/nginx.pid.oldbin
kill -QUIT `cat /usr/local/nginx/logs/nginx.pid.oldbin`

[root@proxy ~]# nginx –v      //查看版本

步骤三：客户端访问测试
1）分别使用浏览器和命令行工具curl测试服务器页面
如果使用firefox火狐浏览器，注意在ssh远程的时候一定要加-X选项

程序  program   【硬盘】
进程  process  	  【内存】独立，独占内存，多进程多占
线程  thread	  
比如 1 process可以有 3 thread ， 只占一份内存拥有3个线程   
节省资源，子线程依赖于父进程

案例2：用户认证
	问题：
沿用练习一，通过调整Nginx服务端配置，实现以下目标：
访问Web页面需要进行用户认证
用户名为：tom，密码为：123456

/usr/local/nginx/conf/nginx.conf  配置文件
全局配置
access.log     error.log      nginx.pid     日志 

·   模板配置文件框架如下：
[root@proxy ~]# vim  /usr/local/nginx/conf/nginx.conf
全局配置（用户名,日志,进程)
http{
    server{
        listen 80;							每一条必须接；
        server_name localhost;
        root html;  						网页文件根目录
       }
       server{
        listen 80;
        server_name www.xyz.com;
        root www;
       }
}
通过Nginx实现Web页面的认证，需要修改Nginx配置文件，在配置文件中添加auth语句实现用户认证。最后使用htpasswd命令创建用户及密码即可

	步骤：
步骤一：修改Nginx配置文件
1）修改/usr/local/nginx/conf/nginx.conf	原有的基础上修改
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
.. ..
server {
        listen       80;
        server_name  localhost;
        auth_basic "Input Password:";                         认证提示符
        auth_basic_user_file "/usr/local/nginx/pass";  认证密码文件（不存在需要新建并添加账户信息不能手动建需要http-tools）
        location / {
            root   html;					          指定网页根路径
            index  index.html index.htm;
        }
  }

2）生成密码文件，创建用户及密码（密码文件不能手动建）
使用htpasswd命令创建账户文件，需要确保系统中已经安装了httpd-tools
[root@proxy ~]# yum -y install  httpd-tools
[root@proxy ~]# htpasswd -c /usr/local/nginx/pass   tom        //创建密码文件（文件名必须跟认证密码文件名称一样）
New password: 
Re-type new password: 
Adding password for user tom
[root@proxy ~]# htpasswd  /usr/local/nginx/pass   jerry      
追加用户，不使用-c选项
（-c 表示新建密码文件也就覆盖了已创建的用户）
New password: 
Re-type new password: 
Adding password for user jerry
[root@proxy ~]# cat /usr/local/nginx/pass

3）重启Nginx服务
[root@proxy ~]# /usr/local/nginx/sbin/nginx -s reload    //重新加载配置文件    
#请先确保nginx是启动状态，否则运行该命令会报错,报错信息如下：
#[error] open() "/usr/local/nginx/logs/nginx.pid" failed (2: No such file or directory)

步骤二：客户端测试

1）登录192.168.4.10客户端主机进行测试
[root@client ~]# firefox http://192.168.4.5                    //输入密码后可以访问
#先确保nginx是启动状态，否则运行该命令会报错,报错信息如下：
#[error] open() "/usr/local/nginx/logs/nginx.pid" failed (2: No such file or directory)

案例3：基于域名的虚拟主机
（如果只输入IP，会显示配置文件里第一个server网页）

虚拟主机：
（1台服务器，1个niginx，做多个网站）
www.xx.com	门户
mail.xx.com	邮箱
mall.xx.com	销售
bbs.xx.com	论坛
	问题：
·  实现两个基于域名的虚拟主机，域名分别为www.a.com
                                                                    www.b.com
·  对域名为www.a.com的站点进行用户认证，用户名称为tom，密码为123

	步骤：
步骤一：修改配置文件

1）修改Nginx服务配置，添加相关虚拟主机配置如下
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
.. ..
server {
        listen       80;                                      
        server_name  www.a.com;                                //域名
auth_basic "Input Password:";                    
        auth_basic_user_file "/usr/local/nginx/pass";       
location / {
            root   html;                                    //指定网站根路径
            index  index.html index.htm;
       }
       
}
… …
    server {
        listen  80;                                        //端口
        server_name  www.b.com;             //域名
	location / { 
	root   www;                                 //指定网站根路径
	index  index.html index.htm;
	}
}

2）创建网站根目录及对应首页文件
[root@proxy ~]# mkdir /usr/local/nginx/www
[root@proxy ~]# echo "www" > /usr/local/nginx/www/index.html

3）重启nginx服务

步骤二：客户端测试

1）修改客户端主机192.168.4.10的/etc/hosts文件，进行域名解析
 [root@client ~]# vim /etc/hosts
192.168.4.5    www.a.com  www.b.com
2）登录192.168.4.10客户端主机进行测试

步骤三：扩展课外实验：其他类型的虚拟主机
1.基于端口的虚拟主机（参考模板）
server {
        listen       8080;                        //端口
        server_name  web1.example.com;          //域名
        ......
}
    server {
        listen       8000;                         //端口
        server_name  web1.example.com;           //域名
      .......
}

2.基于IP的虚拟主机（参考模板）
server {
        listen       192.168.0.1:80;              //IP地址与端口
        server_name  web1.example.com;          //域名
  ... ...
}
    server {
        listen       192.168.0.2:80;             //IP地址与端口
        server_name  web1.example.com;
... ...
}

案例4：SSL虚拟主机
http协议【明文】
输入的tom  123  都为明文  只是认证  不是加密  会被捕捉到
所以需要  http+ssl=https
	问题：
配置基于加密网站的虚拟主机，实现以下目标：
域名为www.c.com
该站点通过https访问

通过私钥、证书（公钥）对该站点所有数据加密（对称或非对称）
（对称加密不适合网络加密，适合单机）
非对称      公钥加密公钥解不开
客户  公钥，加密文件---------------->网页服务器（私钥，公钥）
                 
                         抓包获取公钥及加密文件
CA第三方公证机构  提供公钥私钥
源码安装Nginx时必须使用--with-http_ssl_module参数，启用加密模块，对于需要进行SSL加密处理的站点添加ssl相关指令（设置网站需要的私钥和证书）。

加密算法一般分为对称算法、非对称算法、信息摘要。
对称算法有：AES、DES，主要应用在单机数据加密。
非对称算法有：RSA、DSA，主要应用在网络数据加密。
信息摘要：MD5、sha256，主要应用在数据完整性校验、数据秒传等
md5sum  文件
0b3ddd8e1ccf66486fccc944fb1d7e66  day06.txt
代码与内容有关

步骤一：配置SSL虚拟主机
1）生成私钥与证书（正常不可自己做）       公钥加密，私钥解密
[root@proxy ~]# cd /usr/local/nginx/conf	将公钥私钥加入
[root@proxy ~]# openssl genrsa > cert.key       //生成私钥
gen生成rsa非对称算法的私钥    名字固定方便配置文件不需要更改
[root@proxy ~]# openssl req -new -x509 -key cert.key > cert.pem      //生成证书
req请求  new全新的  x509格式类型 私钥+文件对应生成公钥 

2）修改Nginx配置文件，设置加密网站的虚拟主机
[root@proxy ~]# vim  /usr/local/nginx/conf/nginx.conf
… …    
server {
        listen       443 ssl;
        server_name            www.c.com;
        ssl_certificate      cert.pem;         证书文件默认去conf里找
        ssl_certificate_key  cert.key;        私钥文件
        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;			超时等待时间
        ssl_ciphers  HIGH:!aNULL:!MD5;       
                      高级加密；非空；不能时MD5加密（已知被破解）
        ssl_prefer_server_ciphers  on;
        location / {
            root   html;
            index  index.html index.htm;
        }
    }
3）重启nginx服务

步骤二：客户端验证
1）修改客户端主机192.168.4.10的/etc/hosts文件，进行域名解析
[root@client ~]# vim /etc/hosts
192.168.4.5    www.c.com  www.a.com   www.b.com
2）登录192.168.4.10客户端主机进行测试
# firefox https://www.c.com         信任证书后可以访问


监控   自行研发或者自己写脚本boss系统[基于web页面]
通过网页菜单 来调取后台编写的脚本，实行一键操作，简化运维








