for  i  in  {1..5}   赋予i 1～5的值
seq 5 10  	 赋予i 5～10
seq 5 	默认赋予  1～5
seq        后可接变量
[root@svr7 ~]# i=5
[root@svr7 ~]# echo {1..$i}
{1..5}
[root@svr7 ~]# seq $i
1
2
3
4
5

echo  -n  每次输出完不换行
[root@svr7 ~]# echo -n '*'; echo '*'
**

case简化版if  匹配对应位置变量参数
case  变量  in
模式1)
    命令序列1 ;;     双分号表示这一层命令结束
模式2)
    命令序列2 ;;
    .. ..
*)
    默认命令序列
esac
[a-Z]代表字符,[0-9]代表数字,其他属于符号

在Shell脚本中，将一些需重复使用的操作，定义为公共的语句块，即可称为函数。通过使用函数，可以使脚本代码更加简洁，增强易读性，提高Shell脚本的执行效率

1）函数的定义方法
格式1：
function  函数名 {
    命令序列
    .. ..
}

格式2：
函数名() {
    命令序列
    .. ..
}

函数名重复时会覆盖掉
echo -e  "\033[36mOK\033[0m"    
\033 打开echo扩展颜色
0x是样式   1  2  3  4.。。
3x是字体色  31  35  。。。
4x是背景色   。。。 。 。
10x是高亮色  。 。。 。

wait 等所有后台进程都结束再结束脚本

Shell版本的fork炸弹
[root@svr5 ~]# vim test.sh
#!/bin/bash
.(){
.|.&
}
.

break可以结束整个循环；continue结束本次循环，进入下一次循环；exit结束整个脚本




















