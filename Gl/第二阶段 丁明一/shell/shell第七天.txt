awk编程语言/数据处理
编辑文件sed  数据过滤awk                       sed shanchu自动对齐？9*9?
基本操作方法                                                column -t  
前置命令|awk [选项] '条件{指令}'
格式：awk [选项] '[条件]{指令}' 文件
其中，print 是最常用的编辑指令；若有多条编辑指令，可用分号分隔
处理文本时，若未指定分隔符，则默认将空格、制表符等作为分隔符。
awk的print指令不仅可以打印变量，还可以打印常量
# awk -F: '{print $1,"的解释器:",$7}' /etc/passwd

选项 -F 可指定分隔符
输出passwd文件中以分号分隔的第1、7个字段，显示的不同字段之间以逗号隔开
awk常用内置变量：
$0 文本当前行的全部内容
$1	文本的第1列
$2	文件的第2列，依此类推
NR	文件当前行的行号
NF	文件当前行的列数（有几列）
# awk -F: '{print NR,NF}' passwd.txt

利用awk提取本机的网络流量、根分区剩余容量、获取远程失败的IP地址

tailf 动态查看内容

awk处理的时机
awk会逐行处理文本，支持在处理第一行之前做一些准备工作，以及在处理完最后一行之后做一些总结性质的工作。
# awk 'BEGIN{a=2;print aa}'

# awk 'BEGIN{a=2;print a+a}'
4
# awk 'BEGIN{a=2;print "aa"}'
aa
# awk 'BEGIN{a=2;print a a}'
22

[root@svr5 ~]# awk 'BEGIN{x=0}/bash$/{x++} END{print x}' /etc/passwd

格式化输出/etc/passwd文件
要求: 格式化输出passwd文件内容时，要求第一行为列表标题，中间打印用户的名称、UID、家目录信息，最后一行提示一共已处理文本的总行数
输出信息时，可以使用“\t”显示Tab制表位：
[root@svr5 ~]# awk -F: 'BEGIN{print "User\tUID\tHome"} \
                                {print $1 "\t"  $3  "\t"  $6}     \
                             END{print "Total",NR,"lines."}' /etc/passwd
# awk -F: 'BEGIN{"User UID Home"} {print $1,$3,$6}END{print "用户共："NR}' /etc/passwd  | column -t

认识awk处理条件的设置
使用正则设置条件
输出root或adm账户的用户名和UID信息
# awk -F: '/^(root|adm)/{print $1,$3}' /etc/passwd
输出账户名称包含root的基本信息（第1列包含root）
# awk -F: '$1~/root/' /etc/passwd
~ 正则模糊匹配
# awk -F: '$7!~/nologin$/{print $1,$7}' /etc/passwd

使用数值/字符串比较设置条件
比较符号：==(等于) !=（不等于） >（大于）
>=（大于等于） <（小于） <=（小于等于）

输出账户UID大于等于1000的账户名称和UID信息：
# awk -F: '$3>=1000{print $1,$3}' /etc/passwd
输出用户名为“root”的行:
# awk -F: '$1=="root"' /etc/passwd
逻辑测试条件
输出账户UID大于10并且小于20的账户信息：
# awk -F: '$3>10 && $3<20' /etc/passwd
输出账户UID大于1000或者账户UID小于10的账户信息：
# awk -F: '$3>1000 || $3<10' /etc/passwd

数学运算
# awk 'BEGIN{x++;print x}'
# awk 'BEGIN{x=8;print x+=2}'
# awk 'BEGIN{ print 23%8}'
# seq  200 | awk  '$1%3==0'

本案例要求编写脚本，实现以下需求：
找到使用bash作登录Shell的本地用户
列出这些用户的shadow密码记录
#/bin/bash
A=$(awk -F:  '/bash$/{print $1}' /etc/passwd)     ## 提取符合条件的账号记录
for i in $A
do
        grep $i /etc/shadow | awk -F: '{print $1,"-->",$2}'                
done 

#!/bin/bash
u=`awk -F: '/bash$/{print $1}' /etc/passwd`
for i in $u
do
  pass1=`grep $i /etc/shadow`
  pass2=${pass1#*:}
  pass3=${pass2%%:*}
  echo "$i---$pass3"
done

awk流程控制
if分支结构（单分支、双分支、多分支）
练习awk数组的使用***************************************

统计/etc/passwd文件中登录Shell是“/bin/bash”的用户个数：
# awk -F: '{if($7~/bash$/){i++}}END{print i}'  /etc/passwd

awk数组
数组的语法格式
数组是一个可以存储多个值的变量，具体使用的格式如下：
定义数组的格式：数组名[下标]=元素值
调用数组的格式：数组名[下标]
遍历数组的用法：for(变量 in 数组名){print 数组名[变量]}

# awk 'BEGIN{a[0]=0;a[1]=11;a[2]=22; for(i in a){print i,a[i]}}'
注意，awk数组的下标除了可以使用数字，也可以使用字符串，字符串需要使用双引号：
[root@svr5 ~]# awk 'BEGIN{a["hehe"]=11;print a["hehe"]}'

分析Web日志的访问量排名，要求获得客户机的地址、访问次数，并且按照访问次数排名
                       awk统计Web访问排名
在分析Web日志文件时，每条访问记录的第一列就是客户机的IP地址，其中会有很多重复的IP地址。因此只用awk提取出这一列是不够的，还需要统计重复记录的数量并且进行排序。

通过awk提取信息时，利用IP地址作为数组下标，每遇到一个重复值就将此数组元素递增1，最终就获得了这个IP地址出现的次数。

针对文本排序输出可以采用sort命令，相关的常见选项为-r、-n、-k。其中-n表示按数字顺序升序排列，而-r表示反序，-k可以指定按第几个字段来排序。默认字符串比较
# awk  '{ip[$1]++} END{for(i in ip) {print i,ip[i]}}' /var/log/httpd/access_log | sort -nr

























































